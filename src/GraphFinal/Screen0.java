/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GraphFinal;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SpinnerListModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author lycee
 */
public class Screen0 extends javax.swing.JFrame {

    Visual graphV;
    
    private Graph graph;
    
    ArrayList<Node> nodes;
    HashMap<Node, ArrayList<Edge>> adjacentList;
//        
    private String file1;
    
    private String file2;
        
    private  boolean dikjstra;
    
    /**
     * Creates new form Guitest
     */
    public Screen0(Graph graph) {
        initComponents();
//        nodes = graph.getNodeList();
//        adjacentList =  graph.getAdjacentList();
        this.graph = graph;
        
        this.addMouseListener(new MouseAdapter(){
            @Override
            public void mouseClicked(MouseEvent e) {
                //
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        succFileButton = new javax.swing.JButton();
        showGraphButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        listAdjacentCheckBox = new javax.swing.JCheckBox();
        listSuccesseurCheckBox = new javax.swing.JCheckBox();
        fileStatusLabel = new javax.swing.JLabel();
        dijkstraCheckBox = new javax.swing.JCheckBox();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        startSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        endSpinner = new javax.swing.JSpinner();
        EdgeNodeCheckBox = new javax.swing.JCheckBox();
        screenTabbedPane = new javax.swing.JTabbedPane();
        graphVisualPanel = new javax.swing.JPanel();
        printPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        printTextArea = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        showButton = new javax.swing.JButton();
        choiceComboBox = new javax.swing.JComboBox<>();
        functionNodeSpinner = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        typeComboBox = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        functionNodeSpinner2 = new javax.swing.JSpinner();
        sbLabel = new javax.swing.JLabel();
        typeCheckBox = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        EdgeComboBox = new javax.swing.JComboBox<>();
        EdgeValTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        file1ModifButton = new javax.swing.JButton();
        file2ModifButton = new javax.swing.JButton();
        distSpinner = new javax.swing.JSpinner();
        sbLabel1 = new javax.swing.JLabel();
        deleteEgeToggleButton = new javax.swing.JToggleButton();
        reloadButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(400, 400));
        setPreferredSize(new java.awt.Dimension(1000, 700));
        setSize(new java.awt.Dimension(1000, 700));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setMaximumSize(new java.awt.Dimension(100, 32767));

        succFileButton.setText("liste-successeurs");
        succFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                succFileButtonActionPerformed(evt);
            }
        });

        showGraphButton.setBackground(new java.awt.Color(245, 237, 0));
        showGraphButton.setText("Show Graph");
        showGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showGraphButtonActionPerformed(evt);
            }
        });

        jButton2.setText("liste-adjacence");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        listAdjacentCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listAdjacentCheckBoxActionPerformed(evt);
            }
        });

        listSuccesseurCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listSuccesseurCheckBoxActionPerformed(evt);
            }
        });

        fileStatusLabel.setText("...");

        dijkstraCheckBox.setText("Dikjstra");
        dijkstraCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dijkstraCheckBoxActionPerformed(evt);
            }
        });

        jButton3.setText("start Dikjstra");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("default graph");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel3.setText("Aide décisionnelle");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setText("Centres de Santé");

        jLabel1.setText("S");

        startSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 30, 1));

        jLabel2.setText("->");

        jLabel4.setText("S");

        endSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 30, 1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(startSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(endSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );

        EdgeNodeCheckBox.setText("EdgeNodefinder");
        EdgeNodeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EdgeNodeCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(EdgeNodeCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(dijkstraCheckBox)
                                .addGap(13, 13, 13))
                            .addComponent(showGraphButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(listSuccesseurCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(succFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(listAdjacentCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2)))))
                .addGap(62, 62, 62))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(jButton3))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jButton4))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(fileStatusLabel))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(jLabel5)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(succFileButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(listAdjacentCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(listSuccesseurCheckBox)))
                .addGap(35, 35, 35)
                .addComponent(showGraphButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileStatusLabel)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dijkstraCheckBox)
                    .addComponent(EdgeNodeCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addGap(105, 105, 105))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.LINE_END);

        screenTabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                screenTabbedPaneMouseClicked(evt);
            }
        });

        graphVisualPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                graphVisualPanelMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                graphVisualPanelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout graphVisualPanelLayout = new javax.swing.GroupLayout(graphVisualPanel);
        graphVisualPanel.setLayout(graphVisualPanelLayout);
        graphVisualPanelLayout.setHorizontalGroup(
            graphVisualPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 985, Short.MAX_VALUE)
        );
        graphVisualPanelLayout.setVerticalGroup(
            graphVisualPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 490, Short.MAX_VALUE)
        );

        screenTabbedPane.addTab("Graph", graphVisualPanel);

        printTextArea.setColumns(20);
        printTextArea.setRows(5);
        jScrollPane1.setViewportView(printTextArea);

        jLabel6.setText("S");

        showButton.setText("Show result/Run");
        showButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showButtonActionPerformed(evt);
            }
        });

        choiceComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lister nœuds (par catégories/type)", "Lister arêtes", "Voisins directs d'un nœud", "Voisins directs d'un type spécifique pour un nœud", "Sommets voisins d'un type spécifique des centres S? et S?", "Vérifier si deux nœuds sont à 2-distance", "Chemin le plus fiable entre 2 nœuds", "Chemin le plus court en  durée entre 2 sites", "Chemin le plus court en distance  entre 2 sites", "Modifier graphe (saisie)", "Modifier graphe (fichier)", "Comparer villes sur critères (Opératoire ou Maternité ou Nutritionnel)", "Modes" }));
        choiceComboBox.setSelectedIndex(choiceComboBox.getItemCount()-1);
        choiceComboBox.setToolTipText("this is the list of dunctionality");
        choiceComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceComboBoxActionPerformed(evt);
            }
        });

        functionNodeSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 30, 1));
        functionNodeSpinner.setEnabled(false);
        functionNodeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                functionNodeSpinnerStateChanged(evt);
            }
        });
        functionNodeSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                functionNodeSpinnerFocusLost(evt);
            }
        });

        jLabel7.setText("Functionality :");

        jLabel8.setText("Node  :");

        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Centre de nutrition (N)", "Bloc Opératoire (O)", "Maternité (M)" }));
        typeComboBox.setEnabled(false);
        typeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboBoxActionPerformed(evt);
            }
        });

        jLabel9.setText("Type :");

        functionNodeSpinner2.setModel(new javax.swing.SpinnerNumberModel(1, 1, 30, 1));
        functionNodeSpinner2.setEnabled(false);

        sbLabel.setText("S");

        typeCheckBox.setText("utilise le type");
        typeCheckBox.setEnabled(false);
        typeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeCheckBoxActionPerformed(evt);
            }
        });

        jLabel11.setText("Modifie Edge :");

        EdgeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fiablity(1 -> 10)", "Distance", "Duree" }));
        EdgeComboBox.setEnabled(false);
        EdgeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EdgeComboBoxActionPerformed(evt);
            }
        });

        EdgeValTextField.setText("val");
        EdgeValTextField.setEnabled(false);
        EdgeValTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EdgeValTextFieldActionPerformed(evt);
            }
        });

        jLabel12.setText("Modif file");

        file1ModifButton.setText("modifie list adjeacent");
        file1ModifButton.setEnabled(false);
        file1ModifButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file1ModifButtonActionPerformed(evt);
            }
        });

        file2ModifButton.setText("modifie list successeur");
        file2ModifButton.setEnabled(false);
        file2ModifButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file2ModifButtonActionPerformed(evt);
            }
        });

        distSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 30, 1));
        distSpinner.setEnabled(false);

        sbLabel1.setText("dist at:");

        deleteEgeToggleButton.setText("Supprimer");
        deleteEgeToggleButton.setEnabled(false);

        reloadButton.setText("recharger");
        reloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout printPanelLayout = new javax.swing.GroupLayout(printPanel);
        printPanel.setLayout(printPanelLayout);
        printPanelLayout.setHorizontalGroup(
            printPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(printPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(printPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(printPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(reloadButton))
                    .addComponent(jLabel7)
                    .addGroup(printPanelLayout.createSequentialGroup()
                        .addGroup(printPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(printPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel6)
                                .addGroup(printPanelLayout.createSequentialGroup()
                                    .addComponent(choiceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(84, 84, 84))
                                .addComponent(sbLabel))
                            .addComponent(showButton)
                            .addComponent(sbLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(printPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(functionNodeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(printPanelLayout.createSequentialGroup()
                                .addGroup(printPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(functionNodeSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11)
                                    .addComponent(distSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(printPanelLayout.createSequentialGroup()
                                        .addComponent(EdgeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(EdgeValTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(deleteEgeToggleButton))
                                .addGap(32, 32, 32)
                                .addGroup(printPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(file2ModifButton)
                                    .addComponent(typeCheckBox)
                                    .addComponent(jLabel9)
                                    .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12)
                                    .addComponent(file1ModifButton))))))
                .addContainerGap(405, Short.MAX_VALUE))
        );
        printPanelLayout.setVerticalGroup(
            printPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, printPanelLayout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(printPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(printPanelLayout.createSequentialGroup()
                        .addGroup(printPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(printPanelLayout.createSequentialGroup()
                                .addComponent(choiceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, printPanelLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(printPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(functionNodeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(typeCheckBox)))
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(printPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sbLabel)
                    .addGroup(printPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(functionNodeSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(printPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(distSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sbLabel1))
                .addGap(15, 15, 15)
                .addGroup(printPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addGap(9, 9, 9)
                .addGroup(printPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(printPanelLayout.createSequentialGroup()
                        .addComponent(EdgeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(printPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(printPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                                .addComponent(showButton)
                                .addGap(18, 18, 18))
                            .addGroup(printPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteEgeToggleButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))
                    .addGroup(printPanelLayout.createSequentialGroup()
                        .addGroup(printPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(file1ModifButton)
                            .addComponent(EdgeValTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(file2ModifButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reloadButton)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        screenTabbedPane.addTab("Print", printPanel);

        getContentPane().add(screenTabbedPane, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Functionalité");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showGraphButtonActionPerformed
        // TODO add your handling code here:
        
        //if(graphV != null || nodes == null || adjacentList == null) return;
        if(listAdjacentCheckBox.isSelected() && listSuccesseurCheckBox.isSelected()){
            graphV = null;
            System.out.println("check is true");
            graph.fillGraph(file1, file2);
            graphV = new Visual(graphVisualPanel, graph, this);
            graphVisualPanel.add(graphV);
            this.setSize(this.getWidth() + 1, this.getHeight());
            nodes = graph.getNodeList();
            adjacentList = graph.getAdjacentList();
            
            
            screenTabbedPane.setEnabledAt(1, true);
            //deactivate the check box
            listAdjacentCheckBox.setSelected(false);
            listSuccesseurCheckBox.setSelected(false);
            
            
            fileStatusLabel.setText("le graph est bien chargé");
        }else{
            fileStatusLabel.setText("il y a un problem avec le fichiers");
        }
    }//GEN-LAST:event_showGraphButtonActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
        screenTabbedPane.setPreferredSize(new Dimension((int) (this.getWidth() * 0.7), this.getHeight()));
        
        if(graphV == null) return;
        graphV.setNodePosition();
        graphV.repaint();
    }//GEN-LAST:event_formComponentResized

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        File path = filefinder();
        if( path == null) return;
        file1 = path.getAbsolutePath();
        if(file1 != null){
            listAdjacentCheckBox.setSelected(true);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void succFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_succFileButtonActionPerformed
        // TODO add your handling code here:
        File path = filefinder();
        if(path == null) return ;
        file2 = path.getAbsolutePath(); 
        if(file2 != null){
            listSuccesseurCheckBox.setSelected(true);
        }
    }//GEN-LAST:event_succFileButtonActionPerformed

    private void listAdjacentCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listAdjacentCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listAdjacentCheckBoxActionPerformed

    private void listSuccesseurCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listSuccesseurCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listSuccesseurCheckBoxActionPerformed

    private void dijkstraCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dijkstraCheckBoxActionPerformed
        // TODO add your handling code here:
        dikjstra = dijkstraCheckBox.isSelected();
    }//GEN-LAST:event_dijkstraCheckBoxActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
            startDikjstra();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
            graphV = null;
            System.out.println(Arrays.toString(graphVisualPanel.getComponents()));
            graphVisualPanel.removeAll();
            System.out.println("check is true");
            graph.fillGraph(file1, file2);
            graphV = new Visual(graphVisualPanel, graph, this);
            graphVisualPanel.add(graphV);
            //this.setSize(this.getWidth() + 1, this.getHeight());
            nodes = graph.getNodeList();
            adjacentList = graph.getAdjacentList();
            screenTabbedPane.setEnabledAt(1, true);
            
            graphV.repaint();
            //deactivate the check box
    }//GEN-LAST:event_jButton4ActionPerformed

    private void showButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showButtonActionPerformed
        // TODO add your handling code here:
        
        //initial variable
        
        
        
        String[] type = {"N", "O", "M"};
        Node n1 = null;
        Node n2 = null;
        String s = "";
        
        
        int index = choiceComboBox.getSelectedIndex();
        
        switch(index){
            case 0:
                if(typeComboBox.isEnabled()){
                    s = graph.printNodesByType(type[typeComboBox.getSelectedIndex()]);
                }else{
                    s = graph.printNodesByType(null);
                }
                break;
            case 1:
                s = graph.printEdgeAndNumber();
                break;
            case 2:
                n1 = graph.getNodeByString("S" + functionNodeSpinner.getValue());
                for(Node n : graph.printDirectConnectedNode(n1)){
                    if(!n.equals(n1)){
                        s += n1.getId() + " connected to -> " + n.getId() + "\n";
                    } 
                }
                break;
            case 3:
                
                s = graph.printDirectConnectedNodeByType(graph.getNodeByString("S" + functionNodeSpinner.getValue()), type[typeComboBox.getSelectedIndex()]);
                break;
            case 4:
                n1 = graph.getNodeByString("S" + functionNodeSpinner.getValue());
                n2 = graph.getNodeByString("S" + functionNodeSpinner2.getValue());
                s = graph.printTwoNodeWithType(n1, n2,  type[typeComboBox.getSelectedIndex()]);
                break;
            case 5:
                n1 = graph.getNodeByString("S" + functionNodeSpinner.getValue());
                n2 = graph.getNodeByString("S" + functionNodeSpinner2.getValue());
                s = graph.printNodeAreConnectedAt2Dist(n1, n2);
                break;
            case 6:
                n1 = graph.getNodeByString("S" + functionNodeSpinner.getValue());
                n2 = graph.getNodeByString("S" + functionNodeSpinner2.getValue());
                
                double fiab = 1.0; 
                
                ArrayList<Node> pathFiab = graph.printShortByFiability(n1, n2);
                for(int i = 0; i < pathFiab.size()-1; i++){
                    s += pathFiab.get(i).getId() + " -> ";
                    System.out.println( pathFiab.get(i)+ " - "+ pathFiab.get(i+1) + "  fiab :" + graph.getFiabiliteBetweenTwoNodes(pathFiab.get(i), pathFiab.get(i+1)));
                    fiab *= graph.getFiabiliteBetweenTwoNodes(pathFiab.get(i), pathFiab.get(i+1));
                }
                if(pathFiab.size() <= 1){
                    s += " fiablity = " + fiab;
                }else{
                    s += pathFiab.get(pathFiab.size()-1)+ " fiablity = " + fiab;
                }
                break;
            case 7:
                n1 = graph.getNodeByString("S" + functionNodeSpinner.getValue());
                n2 = graph.getNodeByString("S" + functionNodeSpinner2.getValue());
                
                int sumTime = 0;
                
                ArrayList<Node> pathTime = graph.printShortByDistanceOrTime(n1, n2, "t");
                for(int i = 0; i < pathTime.size()-1; i++){
                    s += pathTime.get(i).getId() + " -> ";
                    System.out.println("fiab :" + graph.getDistanceOrTimeBetweenTwoNodes(pathTime.get(i), pathTime.get(i+1), "t"));
                    sumTime += graph.getDistanceOrTimeBetweenTwoNodes(pathTime.get(i), pathTime.get(i+1), "t");
                }
                if(pathTime.size() <= 1){
                    s += " Duree = " + sumTime;
                }else{
                    s += pathTime.get(pathTime.size()-1)+ " Duree = " + sumTime;
                }
                break;
            case 8:
                n1 = graph.getNodeByString("S" + functionNodeSpinner.getValue());
                n2 = graph.getNodeByString("S" + functionNodeSpinner2.getValue());
                
                int sumDist = 0;
                
                ArrayList<Node> pathDist = graph.printShortByDistanceOrTime(n1, n2, "d");
                for(int i = 0; i < pathDist.size()-1; i++){
                    s += pathDist.get(i).getId() + " -> ";
                    System.out.println("fiab :" + graph.getDistanceOrTimeBetweenTwoNodes(pathDist.get(i), pathDist.get(i+1), "d"));
                    sumDist += graph.getDistanceOrTimeBetweenTwoNodes(pathDist.get(i), pathDist.get(i+1), "d");
                }
                if(pathDist.size() <= 1){
                    s += " Distance = " + sumDist;
                }else{
                    s += pathDist.get(pathDist.size()-1)+ " Distance = " + sumDist;
                }
                break;
            case 9:
                n1 = graph.getNodeByString("S" + functionNodeSpinner.getValue());
                n2 = graph.getNodeByString("S" + functionNodeSpinner2.getValue());
                String val = EdgeValTextField.getText();
                if (deleteEgeToggleButton.isSelected()) val = "0";
                System.out.println( deleteEgeToggleButton.isSelected());
                boolean v = graph.changeGraph(n1, n2, EdgeComboBox.getSelectedIndex(), val);
                s += "le modiefie de graph :"+ v;
                graphV.repaint();
                break;
            case 11:
                
                int typeVal = typeComboBox.getSelectedIndex();
                System.out.println("type  " +typeComboBox.getSelectedIndex());
                n1 = graph.getNodeByString("S" + functionNodeSpinner.getValue());
                n2 = graph.getNodeByString("S" + functionNodeSpinner2.getValue());
                List<Node> v1 = graph.getNodesAtNDistanceByType(n1, (int) distSpinner.getValue(), typeVal);
                
                n2 = graph.getNodeByString("S" + functionNodeSpinner2.getValue());
                List<Node> v2 = graph.getNodesAtNDistanceByType(n2, (int) distSpinner.getValue(),typeVal);
               
                String v1String = "";
                for (Node n : v1){
                    v1String += n.getId() + "  " + n.getType();
                }
                String v2String = "";
                for (Node n : v2){
                    v2String += n.getId() + " " + n.getType();
                }
                
                s += "ville 1 liee à : " + v1.size()  + " " +  v1String 
                        + "\n" + "ville 2 liee  "  + v2.size() + " " +   v2String +  "\n";
                graphV.repaint();
                break;
                
        }
        printTextArea.setText(s);
        
//        functionNodeSpinner.setValue(1);
//        functionNodeSpinner2.setValue(1);
        
    }//GEN-LAST:event_showButtonActionPerformed

    private void screenTabbedPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_screenTabbedPaneMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_screenTabbedPaneMouseClicked

    private void EdgeNodeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EdgeNodeCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EdgeNodeCheckBoxActionPerformed

    private void choiceComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiceComboBoxActionPerformed
        // TODO add your handling code here:
        int index = choiceComboBox.getSelectedIndex();
        
        //init the buttons tu false (hide them)
        functionNodeSpinner.setEnabled(false);
        functionNodeSpinner2.setEnabled(false);
        typeCheckBox.setEnabled(false);
        typeComboBox.setEnabled(false);
        EdgeValTextField.setEnabled(false);
        EdgeComboBox.setEnabled(false);
        distSpinner.setEnabled(false);
        
        deleteEgeToggleButton.setEnabled(false);
        
        file1ModifButton.setEnabled(false);
        file2ModifButton.setEnabled(false);
        
        if (index !=  choiceComboBox.getItemCount()-1) showButton.setEnabled(true);
        switch(index){
            case 0:
                typeCheckBox.setEnabled(true);
                break;
            case 1:
                break;
            case 2:
                functionNodeSpinner.setEnabled(true);
                break;
            case 3:
                functionNodeSpinner.setEnabled(true);
                typeComboBox.setEnabled(true);
                break;
            case 4:
                functionNodeSpinner.setEnabled(true);
                functionNodeSpinner2.setEnabled(true);
                typeComboBox.setEnabled(true);
                break;
            case 5:
                functionNodeSpinner.setEnabled(true);
                functionNodeSpinner2.setEnabled(true);
                break;
            case 6:
                functionNodeSpinner.setEnabled(true);
                functionNodeSpinner2.setEnabled(true);
                break;
            case 7:
                functionNodeSpinner.setEnabled(true);
                functionNodeSpinner2.setEnabled(true);
                break;
            case 8:
                functionNodeSpinner.setEnabled(true);
                functionNodeSpinner2.setEnabled(true);
                break;
            case 9:
                functionNodeSpinner.setEnabled(true);
                functionNodeSpinner2.setEnabled(true);
                EdgeComboBox.setEnabled(true);
                EdgeValTextField.setEnabled(true);
                deleteEgeToggleButton.setEnabled(true);
                break;
            case 10:
                if(file1 == null || file2 == null) return;
                file1ModifButton.setEnabled(true);
                file2ModifButton.setEnabled(true);
                break;
            case 11:
                functionNodeSpinner.setEnabled(true);
                functionNodeSpinner2.setEnabled(true);
                distSpinner.setEnabled(true);
                typeCheckBox.setEnabled(true);
                break;
            default:
                showButton.setEnabled(false);
        }
        
    }//GEN-LAST:event_choiceComboBoxActionPerformed

    private void typeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeComboBoxActionPerformed

    private void typeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeCheckBoxActionPerformed
        // TODO add your handling code here:
        typeComboBox.setEnabled(typeCheckBox.isSelected());
    }//GEN-LAST:event_typeCheckBoxActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        screenTabbedPane.setEnabledAt(1, false);
    }//GEN-LAST:event_formWindowOpened

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        System.out.println(screenTabbedPane.getSelectedComponent());
    }//GEN-LAST:event_formWindowActivated

    private void graphVisualPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_graphVisualPanelMouseClicked
        // TODO add your handling code here:
        
        System.out.println("screen click");
        if(EdgeNodeCheckBox.isSelected()){
            if(graphV == null) return;
            String clickEdge = graphV.EdgeConnectedNode(evt.getX(), evt.getY());
            if(clickEdge.isBlank())return;
            String[] aret = clickEdge.split(";");
            startSpinner.setValue(aret[0].split("S")[1]);
            endSpinner.setValue(Integer.valueOf(2));
            System.out.println(aret[0].split("S")[1] + " test click");
            
//            String[] s = graphV.EdgeConnectedNode(evt.getX(), evt.getY()).split(";");
//            JOptionPane.showMessageDialog(null, "this  edge  connnect " + s[0] +" et " + s[1], "Information", JOptionPane.INFORMATION_MESSAGE);
//            System.out.println("this  edge  connnect " + s[0] +" et " + s[1]);
        }
        
//        if(graphV == null) return;
//        String clickEdge = graphV.EdgeConnectedNode(evt.getX(), evt.getY());
//        if(clickEdge.isBlank())return;
//        String[] aret = clickEdge.split(";");
//        startSpinner.setValue(aret[0].split("S")[1]);
//        endSpinner.setValue(2);
//        System.out.println(aret[0].split("S")[1] + " test click");
    }//GEN-LAST:event_graphVisualPanelMouseClicked

    private void graphVisualPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_graphVisualPanelMousePressed
        // TODO add your handling code here:
        System.out.println("mouse pressed");
    }//GEN-LAST:event_graphVisualPanelMousePressed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
         System.out.println("screen click");
        if(EdgeNodeCheckBox.isSelected()){
            if(graphV == null) return;
            String clickEdge = graphV.EdgeConnectedNode(evt.getX(), evt.getY());
            if(clickEdge.isBlank())return;
            String[] aret = clickEdge.split(";");
            startSpinner.setValue(aret[0].split("S")[1]);
            endSpinner.setValue(Integer.valueOf(2));
            System.out.println(aret[0].split("S")[1] + " test click");
            
//            String[] s = graphV.EdgeConnectedNode(evt.getX(), evt.getY()).split(";");
//            JOptionPane.showMessageDialog(null, "this  edge  connnect " + s[0] +" et " + s[1], "Information", JOptionPane.INFORMATION_MESSAGE);
//            System.out.println("this  edge  connnect " + s[0] +" et " + s[1]);
        }
    }//GEN-LAST:event_formMouseClicked

    private void EdgeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EdgeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EdgeComboBoxActionPerformed

    private void EdgeValTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EdgeValTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EdgeValTextFieldActionPerformed

    private void file1ModifButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file1ModifButtonActionPerformed
        // TODO add your handling code here:
        try {
            // Launch Notepad with the selected file
            ProcessBuilder processBuilder = new ProcessBuilder("notepad.exe", file1);
            processBuilder.start();
            graph.fillGraph(file1, file2);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_file1ModifButtonActionPerformed

    private void file2ModifButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file2ModifButtonActionPerformed
        // TODO add your handling code here:
        try {
            // Launch Notepad with the selected file
            ProcessBuilder processBuilder = new ProcessBuilder("notepad.exe", file2);
            processBuilder.start();
            graph.fillGraph(file1, file2);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_file2ModifButtonActionPerformed

    private void functionNodeSpinnerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_functionNodeSpinnerFocusLost
        // TODO add your handling code here:
        
    }//GEN-LAST:event_functionNodeSpinnerFocusLost

    private void functionNodeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_functionNodeSpinnerStateChanged
        // TODO add your handling code here:
//        Integer nums[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30}; 
//        List<Integer> numbers = Arrays.asList(nums);
//        int val = (int) functionNodeSpinner.getValue();
//        SpinnerNumberModel model;
//        numbers.remove(val);
//        functionNodeSpinner2.setModel(new SpinnerListModel(numbers));
        
    }//GEN-LAST:event_functionNodeSpinnerStateChanged

    private void reloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadButtonActionPerformed
        // TODO add your handling code here:
        graph.fillGraph(file1, file2);
    }//GEN-LAST:event_reloadButtonActionPerformed

    public String getFile1() {
        return file1;
    }

    public String getFile2() {
        return file2;
    }

    public void startDikjstra(){
        if(dikjstra){
            int startNode = (int) startSpinner.getValue();
            int endNode = (int) endSpinner.getValue();        
            if(startNode != endNode){
                graph.initialColor();
                graph.printShortByFiability(graph.getNodeByNum(startNode), graph.getNodeByNum(endNode));
            }
        }
    }

//    /**
//     * @param args the command line arguments
//     */
////    public static void main(String args[]) {
////        /* Set the Nimbus look and feel */
////        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
////        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
////         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
////         */
////        try {
////            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
////                if ("Nimbus".equals(info.getName())) {
////                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
////                    break;
////                }
////            }
////        } catch (ClassNotFoundException ex) {
////            java.util.logging.Logger.getLogger(Guitest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
////        } catch (InstantiationException ex) {
////            java.util.logging.Logger.getLogger(Guitest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
////        } catch (IllegalAccessException ex) {
////            java.util.logging.Logger.getLogger(Guitest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
////        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
////            java.util.logging.Logger.getLogger(Guitest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
////        }
////        //</editor-fold>
////
////        /* Create and display the form */
////        java.awt.EventQueue.invokeLater(new Runnable() {
////            public void run() {
////                new Guitest(null, null).setVisible(true);
////            }
////        });
////    }

    
    public void setSpinnerVal(Integer x, Integer y){
        
        startSpinner.setValue(Integer.valueOf(x));
        endSpinner.setValue(Integer.valueOf(y));
        
//        
//        System.out.println("screen click");
//        if(EdgeNodeCheckBox.isSelected()){
//            if(graphV == null) return;
//            String clickEdge = graphV.EdgeConnectedNode(evt.getX(), evt.getY());
//            if(clickEdge.isBlank())return;
//            String[] aret = clickEdge.split(";");
//            startSpinner.setValue(aret[0].split("S")[1]);
//            endSpinner.setValue(Integer.valueOf(2));
//            System.out.println(aret[0].split("S")[1] + " test click");
//            
////            String[] s = graphV.EdgeConnectedNode(evt.getX(), evt.getY()).split(";");
////            JOptionPane.showMessageDialog(null, "this  edge  connnect " + s[0] +" et " + s[1], "Information", JOptionPane.INFORMATION_MESSAGE);
////            System.out.println("this  edge  connnect " + s[0] +" et " + s[1]);
//        }
    }
    
    
    
    public void setFileStatus(boolean b){
        String text = "le graphe est ";
        if(b){
            text +=  "bien chargé et mémoire";
        }else{
            text += " mal chargé et mémoire";
        }
        fileStatusLabel.setText(text);
    }
    
    
    
    
    public File filefinder(){
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Fichier CSV (*.csv)", "csv");
        chooser.addChoosableFileFilter(filter);
        chooser.setFileFilter(filter);
        chooser.setApproveButtonText("Ouvrir");
        chooser.setDialogTitle("Enregistrer sous");
        chooser.setDialogType(JFileChooser.SAVE_DIALOG);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setMultiSelectionEnabled(false);
        int result = chooser.showSaveDialog(this);
        if(result == JFileChooser.APPROVE_OPTION){
            System.out.println( chooser.getSelectedFile());
            return chooser.getSelectedFile();
        } else if(result == JFileChooser.CANCEL_OPTION){
        // Dans le cas où l’on annule
            return null;
        }
        return null;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> EdgeComboBox;
    private javax.swing.JCheckBox EdgeNodeCheckBox;
    private javax.swing.JTextField EdgeValTextField;
    private javax.swing.JComboBox<String> choiceComboBox;
    private javax.swing.JToggleButton deleteEgeToggleButton;
    private javax.swing.JCheckBox dijkstraCheckBox;
    private javax.swing.JSpinner distSpinner;
    private javax.swing.JSpinner endSpinner;
    private javax.swing.JButton file1ModifButton;
    private javax.swing.JButton file2ModifButton;
    private javax.swing.JLabel fileStatusLabel;
    private javax.swing.JSpinner functionNodeSpinner;
    private javax.swing.JSpinner functionNodeSpinner2;
    private javax.swing.JPanel graphVisualPanel;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox listAdjacentCheckBox;
    private javax.swing.JCheckBox listSuccesseurCheckBox;
    private javax.swing.JPanel printPanel;
    private javax.swing.JTextArea printTextArea;
    private javax.swing.JButton reloadButton;
    private javax.swing.JLabel sbLabel;
    private javax.swing.JLabel sbLabel1;
    private javax.swing.JTabbedPane screenTabbedPane;
    private javax.swing.JButton showButton;
    private javax.swing.JButton showGraphButton;
    private javax.swing.JSpinner startSpinner;
    private javax.swing.JButton succFileButton;
    private javax.swing.JCheckBox typeCheckBox;
    private javax.swing.JComboBox<String> typeComboBox;
    // End of variables declaration//GEN-END:variables
}
